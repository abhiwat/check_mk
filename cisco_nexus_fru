#!/usr/bin/python

# OIDs used:
# ENTITY-MIB::entPhysicalName                            .1.3.6.1.2.1.47.1.1.1.1.7
# ENTITY-MIB::entPhysicalSerialNum                       .1.3.6.1.2.1.47.1.1.1.1.11
# CISCO-ENTITY-FRU-CONTROL-MIB::cefcFRUPowerOperStatus   .1.3.6.1.4.1.9.9.117.1.1.2.1.2
# SNMPv2-MIB::sysDescr                                   .1.3.6.1.2.1.1.1.0

# Scan function looks for 'Cisco NX-OS' in sysDescr

# Author: Mike Julian - mike@mikejulian.com - http://mikejulian.com

def parse_cisco_nexus_fru(info):
    from collections import defaultdict

    description_info, state_info = info

    # Create dict of descriptions
    descriptions = defaultdict(list)
    for x in description_info:
        descriptions[x[0]].append(x[1])
        descriptions[x[0]].append(x[2])

    # Create list only of FRUs
    fru = []
    for id, frustate in state_info:
        fru.append( ( id, descriptions.get(id)[0], descriptions.get(id)[1], frustate ) )
    return fru

def inventory_cisco_nexus_fru(info):
    frus = parse_cisco_nexus_fru(info)
    return [ (entry[1] + '-' + entry[0], None) for entry in frus ]


def check_cisco_nexus_fru(item, _no_params, info):
    frus = parse_cisco_nexus_fru(info)
    for id, name, serial, state in frus:
        name = name + '-' + id
        state = int(state)
        if item == name:
            if state == 1:
                return (2, "CRIT: Unknown - Serial: %s" % serial )
            elif state == 2:
                return (0, "OK - Chassis component OK - Serial: %s" % serial )
            elif state == 3:
                return (3, "UNKNOWN - Administratively off - Serial: %s" % serial )
            elif state == 4:
                return (2, "CRIT - Insufficient system power - Serial: %s" % serial )
            elif state == 5:
                return (2, "CRIT - Problem with FRU - Serial: %s" % serial )
            elif state == 6:
                return (2, "CRIT - Problem with temperature level - Serial: %s" % serial )
            elif state == 7:
                return (2, "CRIT - Problem with fan - Serial: %s" % serial )
            elif state == 8:
                return (2, "CRIT - General failure - Serial: %s" % serial )
            elif state == 9:
                return (2, "CRIT - Power on, fan failure - Serial: %s" % serial )
            elif state == 10:
                return (2, "CRIT - Insufficient cooling capability - Serial: %s" % serial )
            elif state == 11:
                return (2, "CRIT - Connector rating exceeded - Serial: %s" % serial )
            elif state == 12:
                return (2, "CRIT - Inline power failure - Serial: %s" % serial )
            else:
                return (3, "UNKNOWN - Status unknown - Serial: %s" % serial )
    return (3, "Check problem - UNKNOWN")

check_info["cisco_nexus_fru"] = {
    "check_function"        : check_cisco_nexus_fru,
    "inventory_function"    : inventory_cisco_nexus_fru,
    "service_description"   : "%s",
    "has_perfdata"          : False,
    "snmp_scan_function"    : lambda oid: "Cisco NX-OS" in oid(".1.3.6.1.2.1.1.1.0"),
    "snmp_info"             : [( ".1.3.6.1.2.1.47.1.1.1.1", [OID_END, 7, 11]), (".1.3.6.1.4.1.9.9.117.1.1.2.1", [OID_END, 2])],
}
